@incollection{head_tonewars_2014,
    year={2014},
    isbn={978-3-319-07220-3},
    booktitle={Intelligent Tutoring Systems},
    volume={8474},
    series={Lecture Notes in Computer Science},
    editor={Trausan-Matu, Stefan and Boyer, KristyElizabeth and Crosby, Martha and Panourgia, Kitty},
    doi={10.1007/978-3-319-07221-0_46},
    title={ToneWars: Connecting Language Learners and Native Speakers through Collaborative Mobile Games},
    url={http://dx.doi.org/10.1007/978-3-319-07221-0_46},
    publisher={Springer International Publishing},
    keywords={Mobile Learning; Serious Games; Crowdsourcing; Collaborative Learning},
    author={Head, Andrew and Xu, Yi and Wang, Jingtao},
    pages={368-377},
    language={English}
}

@article{hartmann_hacking_2008,
	title = {Hacking, mashing, gluing: {Understanding} opportunistic design},
	volume = {7},
	shorttitle = {Hacking, mashing, gluing},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4563909},
	number = {3},
	urldate = {2015-02-17},
	journal = {Pervasive Computing, IEEE},
	author = {Hartmann, Bjorn and Doorley, Scott and Klemmer, Scott R.},
	year = {2008},
	pages = {46--54},
	file = {[PDF] from bjoern.org:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/X9HNTFB2/Hartmann et al. - 2008 - Hacking, mashing, gluing Understanding opportunis.pdf:application/pdf;Snapshot:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/MEMIIEPD/login.html:text/html}
}

@inproceedings{brandt_two_2009,
	address = {New York, NY, USA},
	series = {{CHI} '09},
	title = {Two {Studies} of {Opportunistic} {Programming}: {Interleaving} {Web} {Foraging}, {Learning}, and {Writing} {Code}},
	isbn = {978-1-60558-246-7},
	shorttitle = {Two {Studies} of {Opportunistic} {Programming}},
	url = {http://doi.acm.org/10.1145/1518701.1518944},
	doi = {10.1145/1518701.1518944},
	abstract = {This paper investigates the role of online resources in problem solving. We look specifically at how programmers - an exemplar form of knowledge workers - opportunistically interleave Web foraging, learning, and writing code. We describe two studies of how programmers use online resources. The first, conducted in the lab, observed participants' Web use while building an online chat room. We found that programmers leverage online resources with a range of intentions: They engage in just-in-time learning of new skills and approaches, clarify and extend their existing knowledge, and remind themselves of details deemed not worth remembering. The results also suggest that queries for different purposes have different styles and durations. Do programmers' queries "in the wild" have the same range of intentions, or is this result an artifact of the particular lab setting? We analyzed a month of queries to an online programming portal, examining the lexical structure, refinements made, and result pages visited. Here we also saw traits that suggest the Web is being used for learning and reminding. These results contribute to a theory of online resource usage in programming, and suggest opportunities for tools to facilitate online knowledge work.},
	urldate = {2014-11-18},
	@booktitle = {Proceedings of the {SIGCHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
	booktitle = {CHI '09},
	publisher = {ACM},
	author = {Brandt, Joel and Guo, Philip J. and Lewenstein, Joel and Dontcheva, Mira and Klemmer, Scott R.},
	year = {2009},
	keywords = {copy-and-paste, opportunistic programming, prototyping},
	pages = {1589--1598},
	file = {ACM Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/CBGX4K6H/Brandt et al. - 2009 - Two Studies of Opportunistic Programming Interlea.pdf:application/pdf}
}

@inproceedings{dorn_learning_2010,
	address = {New York, NY, USA},
	series = {{CHI} '10},
	title = {Learning on the {Job}: {Characterizing} the {Programming} {Knowledge} and {Learning} {Strategies} of {Web} {Designers}},
	isbn = {978-1-60558-929-9},
	shorttitle = {Learning on the {Job}},
	url = {http://doi.acm.org/10.1145/1753326.1753430},
	doi = {10.1145/1753326.1753430},
	abstract = {This paper reports on a study of professional web designers and developers. We provide a detailed characterization of their knowledge of fundamental programming concepts elicited through card sorting. Additionally, we present qualitative findings regarding their motivation to learn new concepts and the learning strategies they employ. We find a high level of recognition of basic concepts, but we identify a number of concepts that they do not fully understand, consider difficult to learn, and use infrequently. We also note that their learning process is motivated by work projects and often follows a pattern of trial and error. We conclude with implications for end-user programming researchers.},
	urldate = {2015-01-20},
	booktitle = {Proceedings of the {SIGCHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
	publisher = {ACM},
	author = {Dorn, Brian and Guzdial, Mark},
	year = {2010},
	keywords = {informal learning, web development},
	pages = {703--712},
	file = {ACM Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/D2RGT2UC/Dorn and Guzdial - 2010 - Learning on the Job Characterizing the Programmin.pdf:application/pdf}
}

@inproceedings{clarke_what_2007,
	address = {Dagstuhl, Germany},
	series = {Dagstuhl {Seminar} {Proceedings}},
	title = {What is an {End} {User} {Software} {Engineer}?},
	url = {http://drops.dagstuhl.de/opus/volltexte/2007/1080},
	booktitle = {End-{User} {Software} {Engineering}},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik, Germany},
	author = {Clarke, Steven},
	editor = {Burnett, Margaret H. and Engels, Gregor and Myers, Brad A. and Rothermel, Gregg},
	year = {2007},
	annote = {Keywords: Personas, End user software engineer, Professional software engineer},
	file = {07081.ClarkeSteven.Paper.1080.pdf:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/4F64NSJN/07081.ClarkeSteven.Paper.1080.pdf:application/pdf}
}


@inproceedings{brandt_opportunistic_2008,
	address = {New York, NY, USA},
	series = {{WEUSE} '08},
	title = {Opportunistic {Programming}: {How} {Rapid} {Ideation} and {Prototyping} {Occur} in {Practice}},
	isbn = {978-1-60558-034-0},
	shorttitle = {Opportunistic {Programming}},
	url = {http://doi.acm.org/10.1145/1370847.1370848},
	doi = {10.1145/1370847.1370848},
	abstract = {At times, programmers work opportunistically, emphasizing speed and ease of development over code robustness and maintainability. They do this to prototype, ideate, and discover; to understand as quickly as possible what the right solution is. Despite its importance, opportunistic programming remains poorly understood when compared with traditional software engineering. Through fieldwork and a laboratory study, we observed five characteristics of opportunistic programming: Programmers build software from scratch using high-level tools, often add new functionality via copy-and-paste, iterate more rapidly than in traditional development, consider code to be impermanent, and face unique debugging challenges because their applications often comprise many languages and tools composed without upfront design. Based on these characteristics, we discuss future research on tools for debugging, code foraging and reuse, and documentation that are specifically targeted at this style of development.},
	urldate = {2015-09-27},
	booktitle = {Proceedings of the 4th {International} {Workshop} on {End}-user {Software} {Engineering}},
	publisher = {ACM},
	author = {Brandt, Joel and Guo, Philip J. and Lewenstein, Joel and Klemmer, Scott R.},
	year = {2008},
	keywords = {end-user software engineering, opportunistic programming, prototyping},
	pages = {1--5},
	file = {ACM Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/J6QBBE4M/Brandt et al. - 2008 - Opportunistic Programming How Rapid Ideation and .pdf:application/pdf}
}


@article{ko_state_2011,
	title = {The state of the art in end-user software engineering},
	volume = {43},
	url = {http://dl.acm.org/citation.cfm?id=1922658},
	number = {3},
	urldate = {2015-02-09},
	journal = {ACM Computing Surveys (CSUR)},
	author = {Ko, Andrew J. and Abraham, Robin and Beckwith, Laura and Blackwell, Alan and Burnett, Margaret and Erwig, Martin and Scaffidi, Chris and Lawrance, Joseph and Lieberman, Henry and Myers, Brad and {others}},
	year = {2011},
	pages = {21},
	file = {[PDF] from psu.edu:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/MM763X4P/Ko et al. - 2011 - The state of the art in end-user software engineer.pdf:application/pdf;Snapshot:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/7T3N9WIB/citation.html:text/html}
}


@article{parnin_crowd_2012,
	title = {Crowd documentation: {Exploring} the coverage and the dynamics of {API} discussions on {Stack} {Overflow}},
	shorttitle = {Crowd documentation},
	url = {http://scholar.google.com/scholar?cluster=2302637666521001017&hl=en&oi=scholarr},
	urldate = {2015-01-21},
	journal = {Georgia Institute of Technology, Tech. Rep},
	author = {Parnin, Chris and Treude, Christoph and Grammel, Lars and Storey, Margaret-Anne},
	year = {2012},
	file = {[PDF] from gatech.edu:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/2BPTKHP7/Parnin et al. - 2012 - Crowd documentation Exploring the coverage and th.pdf:application/pdf;Snapshot:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/G6TM7QIT/scholar.html:text/html}
}


@inproceedings{ko_role_2011,
	title = {The role of conceptual knowledge in {API} usability},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6070395},
	urldate = {2015-02-28},
	booktitle = {Visual {Languages} and {Human}-{Centric} {Computing} ({VL}/{HCC}), 2011 {IEEE} {Symposium} on},
	publisher = {IEEE},
	author = {Ko, Andrew J. and Riche, Yann},
	year = {2011},
	pages = {173--176},
	file = {[PDF] from washington.edu:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/TDK9AX6H/Ko and Riche - 2011 - The role of conceptual knowledge in API usability.pdf:application/pdf;Snapshot:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/GR36RSR4/cookiedetectresponse.html:text/html}
}


@inproceedings{ko_six_2004,
	title = {Six {Learning} {Barriers} in {End}-{User} {Programming} {Systems}},
	doi = {10.1109/VLHCC.2004.47},
	abstract = {As programming skills increase in demand and utility, the learnability of end-user programming systems is of utmost importance. However, research on learning barriers in programming systems has primarily focused on languages, overlooking potential barriers in the environment and accompanying libraries. To address this, a study of beginning programmers learning Visual Basic.NET was performed. This identified six types of barriers: design, selection, coordination, use, understanding, and information. These barriers inspire a new metaphor of computation, which provides a more learner-centric view of programming system design},
	booktitle = {2004 {IEEE} {Symposium} on {Visual} {Languages} and {Human} {Centric} {Computing}},
	author = {Ko, A.J. and Myers, B.A. and Aung, H.H.},
	month = sep,
	year = {2004},
	keywords = {beginning programmers, Computer languages, computer science education, end-user programming systems, Feedback, learnability, learning barriers, Libraries, Manufacturing, programming environments, Programming profession, programming skills, programming system design, Prototypes, Robot control, Robot kinematics, Robot programming, Utility programs, Visual BASIC, Visual Basic.NET},
	pages = {199--206},
	file = {IEEE Xplore Abstract Record:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/NJKAZA9C/login.html:text/html;six_barriers.pdf:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/G8CGCDDS/six_barriers.pdf:application/pdf}
}


@inproceedings{savage_lamello_2015,
	address = {New York, NY, USA},
	series = {{CHI} '15},
	title = {Lamello: {Passive} {Acoustic} {Sensing} for {Tangible} {Input} {Components}},
	isbn = {978-1-4503-3145-6},
	shorttitle = {Lamello},
	url = {http://doi.acm.org/10.1145/2702123.2702207},
	doi = {10.1145/2702123.2702207},
	abstract = {We describe Lamello, an approach for creating tangible input components that recognize user interaction via passive acoustic sensing. Lamello employs comb-like structures with varying-length tines at interaction points (e.g., along slider paths). Moving a component generates tine strikes; a real-time audio processing pipeline analyzes the resultant sounds and emits high-level interaction events. Our main contributions are in the co-design of the tine structures, information encoding schemes, and audio analysis. We demonstrate 3D printed Lamello-powered buttons, sliders, and dials.},
	urldate = {2015-04-23},
	booktitle = {Proceedings of the 33rd {Annual} {ACM} {Conference} on {Human} {Factors} in {Computing} {Systems}},
	publisher = {ACM},
	author = {Savage, Valkyrie and Head, Andrew and Hartmann, Björn and Goldman, Dan B. and Mysore, Gautham and Li, Wilmot},
	year = {2015},
	keywords = {3d printing, sound, tangible interaction},
	pages = {1277--1280},
	file = {ACM Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/MR8KX5N3/Savage et al. - 2015 - Lamello Passive Acoustic Sensing for Tangible Inp.pdf:application/pdf}
}

@article{farkas_layering_1998,
	title = {Layering as a safety net for minimalist documentation},
	url = {http://books.google.com/books?hl=en&lr=&id=LvXiZJEUJjAC&oi=fnd&pg=PA247&dq=info:EVDuP_CWRBwJ:scholar.google.com&ots=1ljA7M9iBm&sig=SvqlwOzG3zzMF_ZRMJXjjsjn5yU},
	urldate = {2015-03-20},
	journal = {Minimalism Beyond the Nurnberg Funnel. The MIT Press, Cambridge},
	author = {Farkas, David K.},
	year = {1998},
	pages = {247--274},
	file = {[PDF] from washington.edu:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/4REK4G2H/Farkas - 1998 - Layering as a safety net for minimalist documentat.pdf:application/pdf;Snapshot:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/TGQ9IITA/books.html:text/html}
}

@book{carroll_nurnberg_1990,
	title = {The {Nurnberg} funnel: designing minimalist instruction for practical computer skill},
	shorttitle = {The {Nurnberg} funnel},
	url = {http://tocs.ulb.tu-darmstadt.de/25047507.pdf},
	urldate = {2015-03-05},
	publisher = {MIT press Cambridge, MA},
	author = {Carroll, John Millar},
	year = {1990}
}


@inproceedings{burnett_future_2014,
	address = {New York, NY, USA},
	series = {{FOSE} 2014},
	title = {Future of {End}-user {Software} {Engineering}: {Beyond} the {Silos}},
	isbn = {978-1-4503-2865-4},
	shorttitle = {Future of {End}-user {Software} {Engineering}},
	url = {http://doi.acm.org/10.1145/2593882.2593896},
	doi = {10.1145/2593882.2593896},
	abstract = {End-user software engineering (EUSE) is a research area that aims to invent new kinds of technologies that collaborate with end users to improve the quality of their software. The practice that EUSE research aims to support is end users using new tools and methods to improve the quality of the software that they and other end users have created. There is a need for this outcome because research shows both that the number of end users creating their own software greatly exceeds the number of professional software developers, and that the software they create is riddled with errors. In this paper, we describe the present state of EUSE, and challenges in moving forward toward a bright future. We show how the future of EUSE may become over-siloed, restricting future researchers' vision of what can be achieved. We then show that focusing on the in-the-moment intents of end-user developers can be used to derive a number of promising directions forward for EUSE researchers, and how theories can help us further de-silo future EUSE research. Finally, we discuss how overcoming challenges for the future of end-user software engineering may also bring direct benefits to the future of "classic" software engineering.},
	urldate = {2015-04-23},
	booktitle = {Proceedings of the on {Future} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Burnett, Margaret M. and Myers, Brad A.},
	year = {2014},
	keywords = {end-user development, End-user software engineering (EUSE)},
	pages = {201--211},
	file = {p201-burnett.pdf:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/MGAID7HB/p201-burnett.pdf:application/pdf}
}

@incollection{blackwell_psychological_2006,
	year={2006},
	isbn={978-1-4020-4220-1},
	booktitle={End User Development},
	volume={9},
	series={Human-Computer Interaction Series},
	editor={Lieberman, Henry and PaternÃ², Fabio and Wulf, Volker},
	doi={10.1007/1-4020-5386-X_2},
	title={Psychological Issues in End-User Programming},
	url={http://dx.doi.org/10.1007/1-4020-5386-X_2},
	publisher={Springer Netherlands},
	author={Blackwell, AlanF.},
	pages={9-30},
	language={English}
}


@inproceedings{head_tutorons_2015,
	address = {Atlanta, GA, USA},
	title = {Tutorons: {Generating} {Context}-{Relevant}, {On}-{Demand} {Explanations} and {Demonstrations} of {Online} {Code}},
	abstract = {Programmers frequently turn to the web to solve problems and find example code. For the sake of brevity, the snippets in online instructions often gloss over the syntax of languages like CSS selectors and Unix commands. Programmers must compensate by consulting external documentation. In this paper, we propose language-specific routines called Tutorons that automatically generate context-relevant, on-demand micro- explanations of code. A Tutoron detects explainable code in a web page, parses it, and generates in-situ natural language explanations and demonstrations of code. We build Tutorons for CSS selectors, regular expressions, and the Unix command “wget”. We demonstrate techniques for generating natural language explanations through template instantiation, synthesizing code demonstrations by parse tree traversal, and building compound explanations of co-occurring options. Through a qualitative study, we show that Tutoron-generated explanations can reduce the need for reference documentation in code modification tasks.},
	@booktitle = {Visual {Languages} and {Human}-{Centric} {Computing} ({VL}/{HCC}), 2015 {IEEE} {Symposium} on},
	booktitle = {VL/HCC '15},
	author = {Head, Andrew and Appachu, Codanda and Hearst, Marti A. and Hartmann, Björn},
	@year = {2015},
	keywords = {3d printing, sound, tangible interaction}
}

@inproceedings{karaivanov_phrase-based_2014,
	address = {New York, NY, USA},
	series = {Onward! 2014},
	title = {Phrase-{Based} {Statistical} {Translation} of {Programming} {Languages}},
	isbn = {978-1-4503-3210-1},
	url = {http://doi.acm.org/10.1145/2661136.2661148},
	doi = {10.1145/2661136.2661148},
	abstract = {Phrase-based statistical machine translation approaches have been highly successful in translating between natural languages and are heavily used by commercial systems (e.g. Google Translate). The main objective of this work is to investigate the applicability of these approaches for translating between programming languages. Towards that, we investigated several variants of the phrase-based translation approach: i) a direct application of the approach to programming languages, ii) a novel modification of the approach to incorporate the grammatical structure of the target programming language (so to avoid generating target programs which do not parse), and iii) a combination of ii) with custom rules added to improve the quality of the translation. To experiment with the above systems, we investigated machine translation from C\# to Java. For the training, which takes about 60 hours, we used a parallel corpus of 20,499 C\#-to-Java method translations. We then evaluated each of the three systems above by translating 1,000 C\# methods. Our experimental results indicate that with the most advanced system, about 60\% of the translated methods compile (the top ranked) and out of a random sample of 50 correctly compiled methods, 68\% (34 methods) were semantically equivalent to the reference solution.},
	urldate = {2015-10-09},
	booktitle = {Proceedings of the 2014 {ACM} {International} {Symposium} on {New} {Ideas}, {New} {Paradigms}, and {Reflections} on {Programming} \& {Software}},
	publisher = {ACM},
	author = {Karaivanov, Svetoslav and Raychev, Veselin and Vechev, Martin},
	year = {2014},
	keywords = {programming language translation, statistical machine translation},
	pages = {173--184},
	file = {ACM Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/7Q57XMDD/Karaivanov et al. - 2014 - Phrase-Based Statistical Translation of Programmin.pdf:application/pdf}
}


@inproceedings{scaffidi_estimating_2005,
	title = {Estimating the numbers of end users and end user programmers},
	doi = {10.1109/VLHCC.2005.34},
	abstract = {In 1995, Boehm predicted that by 2005, there would be "55 million performers" of "end user programming" in the United States. The original context and method which generated this number had two weaknesses, both of which we address. First, it relies on undocumented, judgment-based factors to estimate the number of end user programmers based on the total number of end users; we address this weakness by identifying specific end user sub-populations and then estimating their sizes. Second, Boehm's estimate relies on additional undocumented, judgment-based factors to adjust for rising computer usage rates; we address this weakness by integrating fresh Bureau of Labor Statistics (BLS) data and projections as well as a richer estimation method. With these improvements to Boehm's method, we estimate that in 2012 there will be 90 million end users in American workplaces. Of these, we anticipate that over 55 million will use spreadsheets or databases (and therefore may potentially program), while over 13 million will describe themselves as programmers, compared to BLS projections of fewer than 3 million professional programmers. We have validated our improved method by generating estimates for 2001 and 2003, then verifying that our estimates are consistent with existing estimates from other sources.},
	booktitle = {2005 {IEEE} {Symposium} on {Visual} {Languages} and {Human}-{Centric} {Computing}},
	author = {Scaffidi, C. and Shaw, M. and Myers, Brad},
	month = sep,
	year = {2005},
	keywords = {Bureau of Labor Statistics, Computer industry, Computer science, Costs, Databases, Employment, end user programming, judgment-based factors, Prediction methods, programming environments, Programming profession, Software engineering, Software performance, spreadsheets, Statistics, United States, user centred design},
	pages = {207--214},
	file = {IEEE Xplore Abstract Record:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/R2V6HJTT/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/DH7SVHH7/Scaffidi et al. - 2005 - Estimating the numbers of end users and end user p.pdf:application/pdf}
}

@inproceedings{mamykina_design_2011,
	title = {Design lessons from the fastest q\&a site in the west},
	url = {http://dl.acm.org/citation.cfm?id=1979366},
	urldate = {2015-01-30},
	@booktitle = {Proceedings of the {SIGCHI} conference on {Human} factors in computing systems},
	booktitle = {CHI '11},
	publisher = {ACM},
	author = {Mamykina, Lena and Manoim, Bella and Mittal, Manas and Hripcsak, George and Hartmann, Björn},
	@year = {2011},
	pages = {2857--2866},
	file = {[PDF] from berkeley.edu:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/WPJV354U/Mamykina et al. - 2011 - Design lessons from the fastest q&a site in the we.pdf:application/pdf;Snapshot:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/4EDQJ2UP/citation.html:text/html}
}

@inproceedings{lahtinen_study_2005,
	address = {New York, NY, USA},
	series = {{ITiCSE} '05},
	title = {A {Study} of the {Difficulties} of {Novice} {Programmers}},
	isbn = {978-1-59593-024-8},
	url = {http://doi.acm.org/10.1145/1067445.1067453},
	doi = {10.1145/1067445.1067453},
	abstract = {Programming is related to several fields of technology, and many university students are studying the basics of it. Unfortunately, they often face difficulties already on the basic courses. This work studies the difficulties in learning programming in order to support developing learning materials for basic programming courses. The difficulties have to be recognized to be able to aid learning and teaching in an effective way.An international survey of opinions was organized for more than 500 students and teachers. This paper analyses the results of the survey. The survey provides information of the difficulties experienced and perceived when learning and teaching programming. The survey results also provide basis for recommendations for developing learning materials and approaches.},
	urldate = {2015-10-26},
	@booktitle = {Proceedings of the 10th {Annual} {SIGCSE} {Conference} on {Innovation} and {Technology} in {Computer} {Science} {Education}},
	booktitle = {ITiCSE '05},
	publisher = {ACM},
	author = {Lahtinen, Essi and Ala-Mutka, Kirsti and Järvinen, Hannu-Matti},
	@year = {2005},
	keywords = {difficulties, learning, novices, programming, teaching},
	pages = {14--18},
	file = {ACM Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/RJMUEN26/Lahtinen et al. - 2005 - A Study of the Difficulties of Novice Programmers.pdf:application/pdf}
}

@inproceedings{ichinco_exploring_2015,
	address = {Atlanta, GA, USA},
	title = {Exploring Novice Programmer Example Use},
	@booktitle = {Visual {Languages} and {Human}-{Centric} {Computing} ({VL}/{HCC}), 2015 {IEEE} {Symposium} on},
	booktitle = {VL/HCC '15},
	author = {Ichinco, Michelle and Kelleher, Caitlin},
	@year = {2015},
}

@book{beyer_contextual_1997,
	title = {Contextual design: defining customer-centered systems},
	shorttitle = {Contextual design},
	url = {http://books.google.com/books?hl=en&lr=&id=JxQaQgOONGIC&oi=fnd&pg=PP2&dq=info:qpxXPIRjK40J:scholar.google.com&ots=-SW1lH8-y4&sig=t3dzzo6YjjkwuU5rW9OPwIXHebI},
	urldate = {2015-03-21},
	publisher = {Elsevier},
	author = {Beyer, Hugh and Holtzblatt, Karen},
	year = {1997},
	file = {ContextualInquiry-BeyerHoltzblatt.pdf:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/2FB2TWCU/ContextualInquiry-BeyerHoltzblatt.pdf:application/pdf;[HTML] from bjoern.org:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/ZFREMUN2/2005_02.html:text/html;Snapshot:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/J86EHAMD/books.html:text/html}
}


@inproceedings{brandt_example-centric_2010,
	address = {New York, NY, USA},
	series = {{CHI} '10},
	title = {Example-centric {Programming}: {Integrating} {Web} {Search} into the {Development} {Environment}},
	isbn = {978-1-60558-929-9},
	shorttitle = {Example-centric {Programming}},
	url = {http://doi.acm.org/10.1145/1753326.1753402},
	doi = {10.1145/1753326.1753402},
	abstract = {The ready availability of online source-code examples has fundamentally changed programming practices. However, current search tools are not designed to assist with programming tasks and are wholly separate from editing tools. This paper proposes that embedding a task-specific search engine in the development environment can significantly reduce the cost of finding information and thus enable programmers to write better code more easily. This paper describes the design, implementation, and evaluation of Blueprint, a Web search interface integrated into the Adobe Flex Builder development environment that helps users locate example code. Blueprint automatically augments queries with code context, presents a code-centric view of search results, embeds the search experience into the editor, and retains a link between copied code and its source. A comparative laboratory study found that Blueprint enables participants to write significantly better code and find example code significantly faster than with a standard Web browser. Analysis of three months of usage logs with 2,024 users suggests that task-specific search interfaces can significantly change how and when people search the Web.},
	urldate = {2014-11-18},
	booktitle = {Proceedings of the {SIGCHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
	publisher = {ACM},
	author = {Brandt, Joel and Dontcheva, Mira and Weskamp, Marcos and Klemmer, Scott R.},
	@year = {2010},
	keywords = {development, example-centric},
	pages = {513--522},
	file = {ACM Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/KZNPJXVH/Brandt et al. - 2010 - Example-centric Programming Integrating Web Searc.pdf:application/pdf}
}

@inproceedings{tew_developing_2010,
	address = {New York, NY, USA},
	series = {{SIGCSE} '10},
	title = {Developing a {Validated} {Assessment} of {Fundamental} {CS}1 {Concepts}},
	isbn = {978-1-4503-0006-3},
	url = {http://doi.acm.org/10.1145/1734263.1734297},
	doi = {10.1145/1734263.1734297},
	abstract = {Previous studies of student programming ability have raised questions about students' ability to problem solve, read and analyze code, and understand introductory computing concepts. However, it is unclear whether these results are the product of failures of student comprehension or our inability to accurately measure their performance. We propose a method for creating a language independent CS1 assessment instrument and present the results of our analysis used to define the common conceptual content that will serve as the framework for the exam. We conclude with a discussion of future work and our progress towards developing the assessment.},
	urldate = {2014-11-10},
	booktitle = {Proceedings of the 41st {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {ACM},
	author = {Tew, Allison Elliott and Guzdial, Mark},
	year = {2010},
	keywords = {assessment, cs1, programming, validity},
	pages = {97--101},
	file = {ACM Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/5TC88PKM/Tew and Guzdial - 2010 - Developing a Validated Assessment of Fundamental C.pdf:application/pdf}
}

@article{borstler_quality_2011,
	title = {On the {Quality} of {Examples} in {Introductory} {Java} {Textbooks}},
	volume = {11},
	issn = {1946-6226},
	url = {http://doi.acm.org/1921607.1921610},
	doi = {1921607.1921610},
	abstract = {Example programs play an important role in the teaching and learning of programming. Students as well as teachers rank examples as the most important resources for learning to program. Example programs work as role models and must therefore always be consistent with the principles and rules we are teaching. However, it is difficult to find or develop examples that are fully faithful to all principles and guidelines of the object-oriented paradigm and also follow general pedagogical principles and practices. Unless students are able to engage with good examples, they will not be able to tell desirable from undesirable properties in their own and others’ programs. In this article we report on a study in which experienced educators evaluated the quality of object-oriented example programs for novices from popular Java textbooks. The evaluation was accomplished using an online checklist that elicited responses on the technical, object-oriented, and didactic quality of examples. In total 25 reviewers contributed 215 reviews to our dataset, based on 38 example programs from 13 common introductory programming textbooks. Results show that the evaluation instrument is reliable in terms of inter-rater agreement. Overall, example quality was not as good as one might expect from common textbooks, in particular regarding certain object-oriented properties. We conclude that educators should be careful when taking examples straight out of a textbook.},
	number = {1},
	urldate = {2015-10-24},
	journal = {Trans. Comput. Educ.},
	author = {Börstler, Jürgen and Nordström, Marie and Paterson, James H.},
	month = feb,
	year = {2011},
	keywords = {assessment, checklist, courseware, Example programs, examples, Guidelines, principles, textbooks},
	pages = {3:1--3:21},
	file = {example_quality.pdf:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/IJ3HHDGI/example_quality.pdf:application/pdf}
}

@article{exter_exploring_2012,
	title = {Exploring {Experienced} {Professionals}’ {Reflections} on {Computing} {Education}},
	volume = {12},
	issn = {1946-6226},
	url = {http://doi.acm.org/10.1145/2275597.2275601},
	doi = {10.1145/2275597.2275601},
	abstract = {This exploratory qualitative study examines computing professional’s memories of their own formal and non-formal educational experiences, their reflections on how these have prepared them for their professional roles, and their recommendations for an “ideal” undergraduate degree program. Data was collected through semi-structured interviews of experienced computing professionals. Ongoing on-the-job learning is a natural part of professionals’ work lives. Participants indicate that important elements in an undergraduate degree program include foundational computing topics, development of critical thinking and communications skills, and a strong emphasis on experiences similar to those encountered in a professional position, such as complex, realistic group projects. Specific programming languages and technologies should be used only as practice in solving problems and learning on one’s own.},
	number = {3},
	urldate = {2015-10-24},
	journal = {Trans. Comput. Educ.},
	author = {Exter, Marisa and Turnage, Nichole},
	month = jul,
	year = {2012},
	keywords = {Adult Education, computer science education, computing education, continuing professional development, Higher education, non-formal learning, self-learning, Undergraduate, university},
	pages = {12:1--12:23},
	file = {experienced_professionals.pdf:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/NHZMAVVQ/experienced_professionals.pdf:application/pdf}
}


@inproceedings{kim_ethnographic_2004,
	title = {An ethnographic study of copy and paste programming practices in {OOPL}},
	doi = {10.1109/ISESE.2004.1334896},
	abstract = {Although programmers frequently copy and paste code when they develop software, implications of common copy and paste (C\&P) usage patterns have not been studied previously. We have conducted an ethnographic study in order to understand programmers' C\&P programming practices and discover opportunities to assist common C\&P usage patterns. We observed programmers using an instrumented Eclipse IDE and then analyzed why and how they use C\&P operations. Based on our analysis, we constructed a taxonomy of C\&P usage patterns. This paper presents our taxonomy of C\&P usage patterns and discusses our insights with examples drawn from our observations. From our insights, we propose a set of tools that both can reduce software maintenance problems incurred by C\&p; can better support the intents of commonly used C\&P scenarios.},
	@booktitle = {2004 {International} {Symposium} on {Empirical} {Software} {Engineering}, 2004. {ISESE} '04. {Proceedings}},
	booktitle = {ISESE '04},
	author = {Kim, Miryung and Bergman, L. and Lau, T. and Notkin, D.},
	month = aug,
	year = {2004},
	keywords = {Cloning, Computer languages, Computer science, copy and paste code, copy and paste operations, copy and paste programming, copy and paste usage patterns, Eclipse IDE, ethnographic study, History, object-oriented languages, object-oriented programming, object-oriented programming language, OOPL, Pattern analysis, Programming profession, Software Development, Software engineering, software maintenance, software maintenance problems, software tools, taxonomy},
	pages = {83--92},
	file = {IEEE Xplore Abstract Record:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/I3H6TV2X/abs_all.html:text/html;IEEE Xplore Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/NXMZ7VVP/Kim et al. - 2004 - An ethnographic study of copy and paste programmin.pdf:application/pdf}
}


@inproceedings{bauer_selection-based_2007,
	address = {New York, NY, USA},
	series = {{CHI} '07},
	title = {Selection-based {Note}-taking {Applications}},
	isbn = {978-1-59593-593-9},
	url = {http://doi.acm.org/10.1145/1240624.1240773},
	doi = {10.1145/1240624.1240773},
	abstract = {The increasing integration of education and technology has led to the development of a range of note-taking applications. Our project's goal is to provide empirical data to guide the design of such note-taking applications by evaluating the behavioral and learning outcomes of different note-taking functionality. The study reported here compares note-taking using a text editor and four interaction techniques. The two standard techniques are typing and copy-paste. The two novel techniques are restricted copy-paste and menu-selection, intended to increase attention and processing respectively. Hypothesized learning gains from the novel techniques were not observed. As implemented these techniques were less efficient and appeared to be more frustrating to use. However, data regarding differences in both note-taking efficiency and learning suggest several important implications for selection-based note-taking applications, such as pasting and highlighting. Our results also indicate that students have strong opinions regarding their note-taking practices, which may complicate potentially beneficial interventions.},
	urldate = {2015-09-07},
	@booktitle = {Proceedings of the {SIGCHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
	booktitle = {CHI '07},
	publisher = {ACM},
	author = {Bauer, Aaron and Koedinger, Kenneth R.},
	@year = {2007},
	keywords = {annotation, copy-paste, education, note-taking},
	pages = {981--990},
	file = {ACM Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/U9HWHGN7/Bauer and Koedinger - 2007 - Selection-based Note-taking Applications.pdf:application/pdf}
}

@inproceedings{mitkov_computer-aided_2003,
	address = {Stroudsburg, PA, USA},
	series = {{HLT}-{NAACL}-{EDUC} '03},
	title = {Computer-aided {Generation} of {Multiple}-choice {Tests}},
	url = {http://dx.doi.org/10.3115/1118894.1118897},
	doi = {10.3115/1118894.1118897},
	abstract = {This paper describes a novel computer-aided procedure for generating multiple-choice tests from electronic instructional documents. In addition to employing various NLP techniques including term extraction and shallow parsing, the program makes use of language resources such as a corpus and WordNet. The system generates test questions and distractors, offering the user the option to post-edit the test items.},
	urldate = {2015-09-09},
	booktitle = {Proceedings of the {HLT}-{NAACL} 03 {Workshop} on {Building} {Educational} {Applications} {Using} {Natural} {Language} {Processing} - {Volume} 2},
	publisher = {Association for Computational Linguistics},
	author = {Mitkov, Ruslan and Ha, Le An},
	year = {2003},
	pages = {17--22},
	file = {ACM Full Text PDF:/Users/andrew/Library/Application Support/Zotero/Profiles/g1y3llo0.default/zotero/storage/6V45896V/Mitkov and Ha - 2003 - Computer-aided Generation of Multiple-choice Tests.pdf:application/pdf}
}
